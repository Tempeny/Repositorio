import java.util.ArrayList;
import java.util.List;
import enums.MissionStatus;
import enums.MissionType;

public class Simulacion {

    static List<Mision> misiones = new ArrayList<>();  // Lista de misiones disponibles
    static List<NavesEspaciales> naves = new ArrayList<>();  // Lista de naves disponibles

    static List<Mision> misionesPendientes = new ArrayList<>();
    static List<NavesEspaciales> navesAptas = new ArrayList<>();

    public static void simularCiclo() {

        int contador = 0;
        int contador2 = 0;

        // Filtrar misiones pendientes
        for (Mision mision : misiones) {
            if (mision.getStatus() == MissionStatus.PENDIENTE) {
                misionesPendientes.add(mision);
                contador++;
            }
        }
        System.out.println("Misiones pendientes: " + contador);

        // Contar naves disponibles
        for (NavesEspaciales nave : naves) {
            contador2++;
        }
        System.out.println("Naves disponibles: " + contador2);

        // Ordenar las misiones por prioridad
        misionesPendientes.sort((m1, m2) -> Integer.compare(m2.getPrioridad(), m1.getPrioridad()));

        // Evaluar cada misión
        List<Mision> misionesCompletadas = new ArrayList<>();

        for (Mision mision : misionesPendientes) {
            System.out.println("\nEvaluando misión: " + mision.getNombre() +
                    " [prioridad: " + mision.getPrioridad() + "]\nRequiere: ");

            boolean misionEjecutada = false;

            // Mostrar requisitos según el tipo
            if (mision.getTipo() == MissionType.COLONIZACION) {
                System.out.println("Carga mínima y experiencia estratégica");
            } else if (mision.getTipo() == MissionType.EXPLORACION) {
                System.out.println("Autonomía mínima y experiencia científica");
            } else if (mision.getTipo() == MissionType.RECOLECCION_DATOS) {
                System.out.println("Sensores científicos y experiencia técnica");
            }

            // Buscar una nave apta
            for (NavesEspaciales nave : new ArrayList<>(naves)) { // Copia para evitar ConcurrentModificationException
                boolean apta = false;

                switch (mision.getTipo()) {
                    case COLONIZACION:
                        if (nave.getCapacidadCarga() >= mision.getCargaRequerida()
                                && nave.getExperienciaEstrategica() >= mision.getXPRequerido()) {
                            apta = true;
                            nave.ganarExperienciaEstrategica(1);
                        }
                        break;
                    case EXPLORACION:
                        if (nave.getAutonomiaActual() >= mision.getAutonomiaRequerida()
                                && nave.getExperienciaCientifica() >= mision.getXPRequerido()) {
                            apta = true;
                            nave.ganarExperienciaCientifica(1);
                        }
                        break;
                    case RECOLECCION_DATOS:
                        if (nave.tieneSensoresCientificos()
                                && nave.getExperienciaTecnica() >= mision.getXPRequerido()) {
                            apta = true;
                            nave.ganarExperienciaTecnica(1);
                        }
                        break;
                }

                if (apta) {
                    System.out.println("Nave seleccionada: " + nave.getNombre());
                    System.out.println("Ejecutando misión...");
                    System.out.println("Evento aleatorio: " + eventoAleatorio());

                    nave.usarAutonomia(5); // Simula consumo de autonomía
                    navesAptas.add(nave);
                    naves.remove(nave);
                    misionesCompletadas.add(mision);
                    misionEjecutada = true;
                    break; // Salir del bucle de naves
                }
            }

            if (!misionEjecutada) {
                System.out.println("No hay naves aptas para esta misión.");
            }
        }

        // Marcar misiones como completadas
        for (Mision m : misionesCompletadas) {
            misionesPendientes.remove(m);
            m.setStatus(MissionStatus.COMPLETADA);
        }

        // Restaurar autonomía a todas las naves (simulación)
        for (NavesEspaciales nave : navesAptas) {
            nave.restaurarAutonomia();
        }
        System.out.println("\nAutonomía restaurada en todas las naves aptas.");
    }

    public static String eventoAleatorio() {
        // Simulación básica
        String[] eventos = {"Nada relevante", "Fallo menor", "Descubrimiento importante", "Retraso inesperado"};
        return eventos[(int) (Math.random() * eventos.length)];
    }
}